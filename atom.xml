<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yihang</title>
  
  <subtitle>Never Give Up!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yihang-li.github.io/"/>
  <updated>2020-02-15T03:01:27.429Z</updated>
  <id>http://yihang-li.github.io/</id>
  
  <author>
    <name>Yihang Li</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Summary of Using Python to Access Web Data</title>
    <link href="http://yihang-li.github.io/2020/02/14/Summary-of-UPtoAWD-Coursera/"/>
    <id>http://yihang-li.github.io/2020/02/14/Summary-of-UPtoAWD-Coursera/</id>
    <published>2020-02-14T15:21:12.000Z</published>
    <updated>2020-02-15T03:01:27.429Z</updated>
    
    <content type="html"><![CDATA[<p><strong>First of all, thanks Dr. Charles Russell Severance</strong></p><blockquote><p>Why I write this summary?</p><ul><li>gained certificate from last winter vacation(2019)</li><li>need to apply this knowledge for data access</li></ul></blockquote><p><img src="/assets/image-20200214105208294.png" alt="image-20200214105208294" style="zoom:80%;" /></p><a id="more"></a><p><a href="https://www.py4e.com/book" target="_blank" rel="noopener">Book Link</a></p><h1 id="Chapter-11-Regular-expressions"><a href="#Chapter-11-Regular-expressions" class="headerlink" title="Chapter 11 Regular expressions"></a>Chapter 11 Regular expressions</h1><blockquote><p>Regular expressions (regex) are almost their own little programming language for searching and parsing strings.</p></blockquote><p>_For more detail on regex, see: <a href="https://en.wikipedia.org/wiki/Regular_expression" target="_blank" rel="noopener">wiki</a>, <a href="https://docs.python.org/3.5/library/re.html" target="_blank" rel="noopener">python docs</a>._</p><h2 id="Cheat-Sheet"><a href="#Cheat-Sheet" class="headerlink" title="Cheat Sheet"></a>Cheat Sheet</h2><div class="table-container"><table><thead><tr><th style="text-align:center">symbol</th><th style="text-align:center">function</th></tr></thead><tbody><tr><td style="text-align:center"><span style="color:blue"> <strong>^</strong></span></td><td style="text-align:center">Matches the beginning of a line</td></tr><tr><td style="text-align:center"><span style='color:blue'><strong>$</strong></span></td><td style="text-align:center">Matches the end of the line</td></tr><tr><td style="text-align:center"><span style='color:blue'><strong>.</strong></span></td><td style="text-align:center">Matches any character (<strong>a wildcard</strong>)</td></tr><tr><td style="text-align:center"><span style='color:blue'><strong>\s</strong></span></td><td style="text-align:center">Matches whitespace</td></tr><tr><td style="text-align:center"><span style='color:blue'><strong>\S</strong></span></td><td style="text-align:center">Matches any non-whitespace character</td></tr><tr><td style="text-align:center"><span style='color:blue'><strong>?</strong></span></td><td style="text-align:center">Repeats a character zero or one time</td></tr><tr><td style="text-align:center"><span style='color:blue'><strong>??</strong></span></td><td style="text-align:center">Repeats a character zero of one time (<strong>non-greedy</strong>)</td></tr><tr><td style="text-align:center"><span style='color:blue'><strong>*</strong></span></td><td style="text-align:center">Repeats a character zero or more times</td></tr><tr><td style="text-align:center"><span style='color:blue'><strong>*?</strong></span></td><td style="text-align:center">Repeats a character zero or more times (<strong>non-greedy</strong>)</td></tr><tr><td style="text-align:center"><span style='color:blue'><strong>+</strong></span></td><td style="text-align:center">Repeats a character one or more times</td></tr><tr><td style="text-align:center"><span style='color:blue'><strong>+?</strong></span></td><td style="text-align:center">Repeats a character one or more times (<strong>non-greedy</strong>)</td></tr><tr><td style="text-align:center"><span style='color:blue'><strong>[aeiou]</strong></span></td><td style="text-align:center">Matches a single character in the listed set</td></tr><tr><td style="text-align:center"><span style='color:blue'><strong>[\^XYZ]</strong></span></td><td style="text-align:center">Matches a single character not in the listed set</td></tr><tr><td style="text-align:center"><span style='color:blue'><strong>[a-z0-9]</strong></span></td><td style="text-align:center">The set of  characters can include a range</td></tr><tr><td style="text-align:center"><span style='color:blue'><strong>(</strong></span></td><td style="text-align:center">Indicates where string extraction is to start</td></tr><tr><td style="text-align:center"><span style='color:blue'><strong>)</strong></span></td><td style="text-align:center">Indicates where string extraction is to end</td></tr><tr><td style="text-align:center"><span style='color:blue'><strong>\b</strong></span></td><td style="text-align:center">Matches the empty string only at the start of end of word</td></tr><tr><td style="text-align:center"><span style='color:blue'><strong>\B</strong></span></td><td style="text-align:center">Matches the empty string not at the start or end of a word</td></tr><tr><td style="text-align:center"><span style='color:blue'><strong>\d</strong></span></td><td style="text-align:center">Matches any decimal digit (equivalent to [0-9])</td></tr><tr><td style="text-align:center"><span style='color:blue'><strong>\D</strong></span></td><td style="text-align:center">Matches any non-digit character (equivalent to [\^0-9])</td></tr></tbody></table></div><p>_<strong>Note:</strong>_</p><blockquote><ol><li>symbol with repeat function applies to the immediately preceding character(s)</li><li>greedy matching: the repeat characters (  <span style='color:blue'><strong>*</strong></span>  and <span style='color:blue'><strong>+</strong></span> ) push outward in both directions to match the largest possible string</li><li>non-greedy doesn’t mean that the regex will try to find the shortest substring by varying the start index. It just means that if there’s a substring which starts at index 0 and matches the regex, the engine will stop as soon as possible </li><li>escape character: by prefixing with a backslash. i.e. \\$ indicate dollar sign instead of the wildcard.</li></ol></blockquote><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><h3 id="Case-1"><a href="#Case-1" class="headerlink" title="Case 1"></a>Case 1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Search for lines that start with From and have an at sign</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">hand = open(<span class="string">'mbox-short.txt'</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> hand:</span><br><span class="line">    line = line.rstrip()</span><br><span class="line">    <span class="keyword">if</span> re.search(<span class="string">'^From:.+@'</span>, line):</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure><p>The search string <strong>^From:.+@</strong> will successfully match lines that start with “<strong>From:</strong>“, followed by one or more characters (<strong>.+</strong>), followed by an at-sign. So this will match the following line:<br><strong>From: stephen.marquard@uct.ac.za</strong></p><h3 id="Case-2"><a href="#Case-2" class="headerlink" title="Case 2"></a>Case 2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">x = <span class="string">"We just received $10.00 for cookies."</span></span><br><span class="line">y = re.findall(<span class="string">'\$[0-9.]+'</span>, x)</span><br></pre></td></tr></table></figure><p>Since we prefix the dollar sign with a backslash, it actually matches the dollar sign in the input string instead of matching the “end of line”, and the rest of the regular expression matches one or more digits or the period character.</p><p>Note: inside square brackets, characters are not “special”. So, when we say <strong>[0-9.]</strong>, it really means digits or a period . Outside of square brackets, a period is the “wildcard” character and matches any character. Inside square brackets, the period is a period.</p><hr><h1 id="Chapter-12-Networked-Programs"><a href="#Chapter-12-Networked-Programs" class="headerlink" title="Chapter 12 Networked Programs"></a>Chapter 12 Networked Programs</h1><h2 id="12-1-Hypertext-Transfer-Protocol-HTTP"><a href="#12-1-Hypertext-Transfer-Protocol-HTTP" class="headerlink" title="12.1 Hypertext Transfer Protocol - HTTP"></a>12.1 Hypertext Transfer Protocol - HTTP</h2><blockquote><p><strong>Socket/TCP Connections</strong><br>A network connection between two applications where the applications can send and receive data in either direction.</p><p><strong>TCP Port Numbers</strong><br>A number that generally indicates which application you are contacting when you make a socket connection to a server. As an example, web traffic usually uses port 80 while email traffic uses port 25.</p><p><strong>Protocol</strong><br>A protocol is a set of precise rules that all parties follow so we can predict each other’s behavior. In a sense the two applications at either end of the socket are doing a dance and making sure not to step on each other’s toes.</p></blockquote><p><a href="http://www.w3.org/Protocols/rfc2616/rfc2616.txt" target="_blank" rel="noopener">HyperText Transfer Protocol</a>, a long and complex 176-page document with a lot of detail. If you find it interesting, feel free to read it all. But if you take a look around page 36 of RFC2616 you will find the syntax for the GET request. </p><h2 id="12-2-The-world’s-simplest-web-browser"><a href="#12-2-The-world’s-simplest-web-browser" class="headerlink" title="12.2 The world’s simplest web browser"></a>12.2 The world’s simplest web browser</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Code: http://www.py4e.com/code3/socket1.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">mysock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">mysock.connect((<span class="string">'data.pr4e.org'</span>, <span class="number">80</span>))</span><br><span class="line">cmd = <span class="string">'GET http://data.pr4e.org/romeo.txt HTTP/1.0\r\n\r\n'</span>.encode()</span><br><span class="line">mysock.send(cmd)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = mysock.recv(<span class="number">512</span>)</span><br><span class="line">    <span class="keyword">if</span> len(data) &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(data.decode(), end = <span class="string">''</span>)</span><br><span class="line">mysock.close()</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200214180630075.png" alt="image-20200214180630075" style="zoom:80%;" /></p><p>Output:</p><blockquote><p>HTTP/1.1 200 OK<br>Date: Fri, 14 Feb 2020 23:05:30 GMT<br>Server: Apache/2.4.18 (Ubuntu)<br>Last-Modified: Sat, 13 May 2017 11:22:22 GMT<br>ETag: “a7-54f6609245537”<br>Accept-Ranges: bytes<br>Content-Length: 167<br>Cache-Control: max-age=0, no-cache, no-store, must-revalidate<br>Pragma: no-cache<br>Expires: Wed, 11 Jan 1984 05:00:00 GMT<br>Connection: close<br>Content-Type: text/plain</p><p>But soft what light through yonder window breaks<br>It is the east and Juliet is the sun<br>Arise fair sun and kill the envious moon<br>Who is already sick and pale with grief</p></blockquote><h2 id="12-3-Retrieving-an-image-over-HTTP"><a href="#12-3-Retrieving-an-image-over-HTTP" class="headerlink" title="12.3 Retrieving an image over HTTP"></a>12.3 Retrieving an image over HTTP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Code: http://www.py4e.com/code3/urljpeg.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'data.pr4e.org'</span></span><br><span class="line">PORT = <span class="number">80</span></span><br><span class="line">mysock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">mysock.connect((HOST, PORT))</span><br><span class="line">mysock.sendall(<span class="string">b'GET http://data.pr4e.org/cover3.jpg HTTP/1.0\r\n\r\n'</span>)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">picture = <span class="string">b''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = mysock.recv(<span class="number">5120</span>)</span><br><span class="line">    <span class="keyword">if</span> (len(data) &lt; <span class="number">1</span>): <span class="keyword">break</span></span><br><span class="line">    time.sleep(<span class="number">0.25</span>)</span><br><span class="line">    count = count + len(data)</span><br><span class="line">    print(len(data), count)</span><br><span class="line">    picture = picture + data</span><br><span class="line"></span><br><span class="line">mysock.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Look for the end of the header (2 CRLF)</span></span><br><span class="line">pos = picture.find(<span class="string">b'\r\n\r\n'</span>)</span><br><span class="line">print(<span class="string">'Header length'</span>, pos)</span><br><span class="line">print(picture[:pos].decode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Skip past the header and save the picture data</span></span><br><span class="line">picture = picture[pos+<span class="number">4</span>:]</span><br><span class="line">fhand = open(<span class="string">'stuff.jpg'</span>, <span class="string">'wb'</span>)</span><br><span class="line">fhand.write(picture)</span><br><span class="line">fhand.close()</span><br></pre></td></tr></table></figure><p>Output:</p><blockquote><p>1408 1408<br>5120 6528<br>5120 11648<br>…… ……<br>5120 221568<br>3920 230608<br>Header length 394<br>HTTP/1.1 200 OK<br>Date: Fri, 14 Feb 2020 23:21:44 GMT<br>Server: Apache/2.4.18 (Ubuntu)<br>Last-Modified: Mon, 15 May 2017 12:27:40 GMT<br>ETag: “38342-54f8f2e5b6277”<br>Accept-Ranges: bytes<br>Content-Length: 230210<br>Vary: Accept-Encoding<br>Cache-Control: max-age=0, no-cache, no-store, must-revalidate<br>Pragma: no-cache<br>Expires: Wed, 11 Jan 1984 05:00:00 GMT<br>Connection: close<br>Content-Type: image/jpeg</p></blockquote><p>There is a buffer between the server making <code>send()</code> requests and our application making <code>recv()</code> requests. When we run the program with the delay in place, at some point the server might fill up the buffer in the socket and be forced to pause until our program starts to empty the buffer.<br>The pausing of either the sending application or the receiving application is called “<strong>flow control</strong>“.</p><h2 id="12-4-Retrieving-web-pages-with-urllib"><a href="#12-4-Retrieving-web-pages-with-urllib" class="headerlink" title="12.4 Retrieving web pages with urllib"></a>12.4 Retrieving web pages with urllib</h2><blockquote><p><strong>urllib</strong>: does all the socket work for us and makes web pages look like a file.</p></blockquote><p>Using <code>urllib</code>, you can treat a web page much like a file. You simply indicate which web page you would like to retrieve and <code>urllib</code> handles all of the HTTP protocol and header details.</p><p>The equivalent code to read the <code>romeo.txt</code> file from the web using <code>urllib</code> is as follows:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Code: http://www.py4e.com/code3/urllib1.py</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">fhand = urllib.request.urlopen(<span class="string">'http://data.pr4e.org/romeo.txt'</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fhand:</span><br><span class="line">    print(line.decode().strip())</span><br></pre></td></tr></table></figure><p>When the program runs, we only see the output of the contents of the file. The headers are still sent, but the <code>urllib</code> code consumes the headers and only returns the data to us.</p><p>Output:</p><blockquote><p>But soft what light through yonder window breaks<br>It is the east and Juliet is the sun<br>Arise fair sun and kill the envious moon<br>Who is already sick and pale with grief</p></blockquote><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>retrieve the data for <code>romeo.txt</code> and compute the frequency of each word in the file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Code: http:&#x2F;&#x2F;www.py4e.com&#x2F;code3&#x2F;urlwords.py</span><br><span class="line">import urllib.request, urllib.parse, urllib.error</span><br><span class="line"></span><br><span class="line">fhand &#x3D; urllib.request.urlopen(&#39;http:&#x2F;&#x2F;data.pr4e.org&#x2F;romeo.txt&#39;)</span><br><span class="line"></span><br><span class="line">counts &#x3D; dict()</span><br><span class="line">for line in fhand:</span><br><span class="line">    words &#x3D; line.decode().split()</span><br><span class="line">    for word in words:</span><br><span class="line">        counts[word] &#x3D; counts.get(word, 0) + 1</span><br><span class="line">print(counts)</span><br></pre></td></tr></table></figure><p>Output:</p><blockquote><p>{‘But’: 1, ‘soft’: 1, ‘what’: 1, ‘light’: 1, ‘through’: 1, ‘yonder’: 1, ‘window’: 1, ‘breaks’: 1, ‘It’: 1, ‘is’: 3, ‘the’: 3, ‘east’: 1, ‘and’: 3, ‘Juliet’: 1, ‘sun’: 2, ‘Arise’: 1, ‘fair’: 1, ‘kill’: 1, ‘envious’: 1, ‘moon’: 1, ‘Who’: 1, ‘already’: 1, ‘sick’: 1, ‘pale’: 1, ‘with’: 1, ‘grief’: 1}</p></blockquote><h2 id="12-5-Reading-binary-files-using-urllib"><a href="#12-5-Reading-binary-files-using-urllib" class="headerlink" title="12.5 Reading binary files using urllib"></a>12.5 Reading binary files using urllib</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Code: http://www.py4e.com/code3/curl2.py</span></span><br><span class="line"><span class="keyword">import</span> urllib.request, urllib.parse, urllib.error</span><br><span class="line"></span><br><span class="line">img = urllib.request.urlopen(<span class="string">'http://data.pr4e.org/cover3.jpg'</span>)</span><br><span class="line">fhand = open(<span class="string">'cover3.jpg'</span>, <span class="string">'wb'</span>)</span><br><span class="line">size = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    info = img.read(<span class="number">100000</span>)</span><br><span class="line">    <span class="keyword">if</span> len(info) &lt; <span class="number">1</span>: <span class="keyword">break</span></span><br><span class="line">    size += len(info)</span><br><span class="line">    fhand.write(info)</span><br><span class="line">print(size, <span class="string">'characters copied.'</span>)</span><br><span class="line">fhand.close()</span><br></pre></td></tr></table></figure><blockquote><p>read only 100,000 characters at a time and then write those characters to the cover.jpg file before retrieving the next 100,000 characters of data from the web.</p></blockquote><h2 id="12-6-Parsing-HTML-and-scraping-the-web"><a href="#12-6-Parsing-HTML-and-scraping-the-web" class="headerlink" title="12.6 Parsing HTML and scraping the web"></a>12.6 Parsing HTML and scraping the web</h2><blockquote><p>One of the common uses of the <code>urllib</code> capability in Python is to <em>scrape</em> the web. Web scraping is when we write a program that pretends to be a web browser and retrieves pages, then examines the data in those pages looking for patterns.</p><p>As an example, a search engine such as Google will look at the source of one web page and extract the links to other pages and retrieve those pages, extracting links, and so on. Using this technique, Google <em>spiders</em> its way through nearly all of the pages on the web.</p><p>Google also uses the frequency of links from pages it finds to a particular page as one measure of how “important” a page is and how high the page should appear in its search results.</p></blockquote><h2 id="12-7-Parsing-HTML-using-regular-expressions"><a href="#12-7-Parsing-HTML-using-regular-expressions" class="headerlink" title="12.7 Parsing HTML using regular expressions"></a>12.7 Parsing HTML using regular expressions</h2><p>For the simple webpage:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>The First Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">If you like, you can switch to the</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.dr-chuck.com/page2.htm"</span>&gt;</span></span><br><span class="line">Second Page<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can construct a well-formed regular expression to match and extract the link values from the above text as follows:</p><blockquote><p>href=”(<a href="http://.+?" target="_blank" rel="noopener">http://.+?</a>)”</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Code: http://www.py4e.com/code3/urlregex.py</span></span><br><span class="line"><span class="keyword">import</span> urllib.request, urllib.parse, urllib.error</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">url = input(<span class="string">'Enter - '</span>)</span><br><span class="line">html = urllib.request.urlopen(url).read()</span><br><span class="line">links = re.findall(<span class="string">b'href="(http://.+?)"'</span>, html)</span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">    print(link.decode())</span><br></pre></td></tr></table></figure><p>Output:</p><blockquote><p>Enter -  <a href="https://yihang-li.github.io/">https://yihang-li.github.io/</a><br><a href="http://yihang-li.github.io/">http://yihang-li.github.io/</a><br><a href="http://Yihang-Li.github.io/2020/02/14/Summary-of-UPtoAWD-Coursera/">http://Yihang-Li.github.io/2020/02/14/Summary-of-UPtoAWD-Coursera/</a><br><a href="http://Yihang-Li.github.io/2020/02/10/Summary-for-visualization-of-geospatial-data/">http://Yihang-Li.github.io/2020/02/10/Summary-for-visualization-of-geospatial-data/</a><br><a href="http://Yihang-Li.github.io/2020/02/08/Notes-of-Gaussian-Processes-for-Machine-Learning/">http://Yihang-Li.github.io/2020/02/08/Notes-of-Gaussian-Processes-for-Machine-Learning/</a><br><a href="http://Yihang-Li.github.io/2020/02/05/Hello-Echo/">http://Yihang-Li.github.io/2020/02/05/Hello-Echo/</a><br><a href="http://Yihang-Li.github.io/2020/02/05/hello-world/">http://Yihang-Li.github.io/2020/02/05/hello-world/</a></p></blockquote><h2 id="12-8-Parsing-HTML-using-BeautifulSoup"><a href="#12-8-Parsing-HTML-using-BeautifulSoup" class="headerlink" title="12.8 Parsing HTML using BeautifulSoup"></a>12.8 Parsing HTML using BeautifulSoup</h2><blockquote><p><strong>BeautifulSoup</strong> tolerates highly flawed HTML and still lets you easily extract the data you need. See <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/" target="_blank" rel="noopener">docs</a>.</p></blockquote><p>We will use <code>urllib</code> to read the page and then use <code>BeautifulSoup</code> to extract the <code>href</code> attributes from the anchor (<code>a</code>) tags.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Code: http://www.py4e.com/code3/urllinks.py</span></span><br><span class="line"><span class="keyword">import</span> urllib.request, urllib.parse, urllib.error</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ignore SSL certificate errors</span></span><br><span class="line">ctx = ssl.create_default_context()</span><br><span class="line">ctx.check_hostname = <span class="literal">False</span></span><br><span class="line">ctx.verify_mode = ssl.CERT_NONE</span><br><span class="line"></span><br><span class="line">url = input(<span class="string">'Enter - '</span>)</span><br><span class="line">html = urllib.request.urlopen(url, context=ctx).read()</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Retrieve all of the anchor tags</span></span><br><span class="line">tags = soup(<span class="string">'a'</span>)</span><br><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">    print(tag.get(<span class="string">'href'</span>, <span class="literal">None</span>))</span><br></pre></td></tr></table></figure><p>The program prompts for a web address, then opens the web page, reads the data and passes the data to the BeautifulSoup parser, and then retrieves all of the anchor tags and prints out the <code>href</code> attribute for each tag.</p><p>You can use BeautifulSoup to pull out various parts of each tag as follows:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Code: http://www.py4e.com/code3/urllink2.py</span></span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ignore SSL certificate errors</span></span><br><span class="line">ctx = ssl.create_default_context()</span><br><span class="line">ctx.check_hostname = <span class="literal">False</span></span><br><span class="line">ctx.verify_mode = ssl.CERT_NONE</span><br><span class="line"></span><br><span class="line">url = input(<span class="string">'Enter - '</span>)</span><br><span class="line">html = urlopen(url, context=ctx).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># html.parser is the HTML parser included in the standard Python 3 library.</span></span><br><span class="line"><span class="comment"># information on other HTML parsers is here:</span></span><br><span class="line"><span class="comment"># http://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-a-parser</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Retrieve all of the anchor tags</span></span><br><span class="line">tags = soup(<span class="string">'a'</span>)</span><br><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">    <span class="comment"># Look at the parts of a tag</span></span><br><span class="line">    print(<span class="string">'TAG:'</span>, tag)</span><br><span class="line">    print(<span class="string">'URL:'</span>, tag.get(<span class="string">'href'</span>, <span class="literal">None</span>))</span><br><span class="line">    print(<span class="string">'Contents:'</span>, tag.contents[<span class="number">0</span>])</span><br><span class="line">    print(<span class="string">'Attrs:'</span>, tag.attrs)</span><br></pre></td></tr></table></figure><h2 id="12-9-Something-more"><a href="#12-9-Something-more" class="headerlink" title="12.9 Something more"></a>12.9 Something more</h2><blockquote><p><strong>Scrape</strong><br>When a program pretends to be a web browser and retrieves a web page, then looks at the web page content. Often programs are following the links in one page to find the next page so they can traverse a network of pages or a social network.</p><p><strong>Spider</strong><br>The act of a web search engine retrieving a page and then all the pages linked from a page and so on until they have nearly all of the pages on the Internet which they use to build their search index.</p><p><strong>ASCII</strong><br>American Standard Code for Information Interchange</p><p>Each character is represented by a number between 0 and 256 stored in 8 bits of memory(a byte of memory)</p><p>The <strong>ord()</strong> function tells us the numeric value of a simple ASCII character<br>(On the opposite, we can use <strong>chr()</strong>)</p><p>In Python3, all strings are unicode. When we read data from an external resource, we must decode it based on the character set so it is properly represented in Python3 as a string.</p></blockquote><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ul><li>The TCP/IP gives us pipes/sockets between applications</li><li>We designed application protocols to make use of these pipes</li><li>HyperText Transfer Protocol (HTTP) is a simple yet powerful proctocol</li><li>Python has good support for sockets, HTTP, and HTML parsing</li></ul><h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><h1 id="Chapter-13-Using-Web-Services"><a href="#Chapter-13-Using-Web-Services" class="headerlink" title="Chapter 13 Using Web Services"></a>Chapter 13 Using Web Services</h1><h2 id="13-1-eXtensible-Markup-Language-XML"><a href="#13-1-eXtensible-Markup-Language-XML" class="headerlink" title="13.1 eXtensible Markup Language - XML"></a>13.1 eXtensible Markup Language - XML</h2><p>XML looks similar to HTML but more structured. See a sample below:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">person</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Chuck<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">phone</span> <span class="attr">type</span>=<span class="string">"intl"</span>&gt;</span></span><br><span class="line">     +1 734 303 4456</span><br><span class="line">  <span class="tag">&lt;/<span class="name">phone</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">email</span> <span class="attr">hide</span>=<span class="string">"yes"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Often it is helpful to think of an XML document as a tree structure where there is a top tag <code>person</code> and other tags such as <code>phone</code> are drawn as <em>children</em> of their parent nodes.</p><p><img src="/assets/image-20200214211642103.png" alt="image-20200214211642103" style="zoom:80%;" /></p><h2 id="13-2-Parsing-XML"><a href="#13-2-Parsing-XML" class="headerlink" title="13.2 Parsing XML"></a>13.2 Parsing XML</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Code: http://www.py4e.com/code3/xml1.py</span></span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line">data = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;person&gt;</span></span><br><span class="line"><span class="string">  &lt;name&gt;Chuck&lt;/name&gt;</span></span><br><span class="line"><span class="string">  &lt;phone type="intl"&gt;</span></span><br><span class="line"><span class="string">     +1 734 303 4456</span></span><br><span class="line"><span class="string">   &lt;/phone&gt;</span></span><br><span class="line"><span class="string">   &lt;email hide="yes"/&gt;</span></span><br><span class="line"><span class="string">&lt;/person&gt;'''</span></span><br><span class="line"></span><br><span class="line">tree = ET.fromstring(data)</span><br><span class="line">print(<span class="string">'Name:'</span>, tree.find(<span class="string">'name'</span>).text)</span><br><span class="line">print(<span class="string">'Attr:'</span>, tree.find(<span class="string">'email'</span>).get(<span class="string">'hide'</span>))</span><br></pre></td></tr></table></figure><p>Output:</p><blockquote><p>Name: Chuck<br>Attr: yes</p></blockquote><p>Calling <code>fromstring</code> converts the string representation of the XML into a “tree” of XML nodes. When the XML is in a tree, we have a series of methods we can call to extract portions of data from the XML.</p><p>The <code>find</code> function searches through the XML tree and retrieves a <em>node</em> that matches the specified tag. Each node can have some text, some attributes (like hide), and some “child” nodes. Each node can be the top of a tree of nodes.</p><h2 id="13-3-Looping-through-nodes"><a href="#13-3-Looping-through-nodes" class="headerlink" title="13.3 Looping through nodes"></a>13.3 Looping through nodes</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Code: http://www.py4e.com/code3/xml2.py</span></span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line">input = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;stuff&gt;</span></span><br><span class="line"><span class="string">    &lt;users&gt;</span></span><br><span class="line"><span class="string">        &lt;user x="2"&gt;</span></span><br><span class="line"><span class="string">            &lt;id&gt;001&lt;/id&gt;</span></span><br><span class="line"><span class="string">            &lt;name&gt;Chuck&lt;/name&gt;</span></span><br><span class="line"><span class="string">        &lt;/user&gt;</span></span><br><span class="line"><span class="string">        &lt;user x="7"&gt;</span></span><br><span class="line"><span class="string">            &lt;id&gt;009&lt;/id&gt;</span></span><br><span class="line"><span class="string">            &lt;name&gt;Brent&lt;/name&gt;</span></span><br><span class="line"><span class="string">        &lt;/user&gt;</span></span><br><span class="line"><span class="string">    &lt;/users&gt;</span></span><br><span class="line"><span class="string">&lt;/stuff&gt;'''</span></span><br><span class="line"></span><br><span class="line">stuff = ET.fromstring(input)</span><br><span class="line">lst = stuff.findall(<span class="string">'users/user'</span>)</span><br><span class="line">print(<span class="string">'User count:'</span>, len(lst))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> lst:</span><br><span class="line">    print(<span class="string">'Name'</span>, item.find(<span class="string">'name'</span>).text)</span><br><span class="line">    print(<span class="string">'Id'</span>, item.find(<span class="string">'id'</span>).text)</span><br><span class="line">    print(<span class="string">'Attribute'</span>, item.get(<span class="string">"x"</span>))</span><br></pre></td></tr></table></figure><p>Output:</p><blockquote><p>User count: 2<br>Name Chuck<br>Id 001<br>Attribute 2<br>Name Brent<br>Id 009<br>Attribute 7</p></blockquote><p>Note:</p><blockquote><p>It is important to includes all parents level elements in the <strong>findall</strong> statement except for the top level element. Otherwise, Python will not find any desired nodes.</p></blockquote><h2 id="13-4-JavaScript-Object-Notation-JSON"><a href="#13-4-JavaScript-Object-Notation-JSON" class="headerlink" title="13.4 JavaScript Object Notation - JSON"></a>13.4 JavaScript Object Notation - JSON</h2><blockquote><p>The JSON format was inspired by the object and array format used in the JavaScript language. But since Python was invented before JavaScript, Python’s syntax for dictionaries and lists influenced the syntax of JSON. So the format of JSON is nearly identical to a combination of Python lists and dictionaries.</p></blockquote><p>Here is a JSON encoding that is roughly equivalent to the simple XML from above:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span> : <span class="string">"Chuck"</span>,</span><br><span class="line">  <span class="attr">"phone"</span> : &#123;</span><br><span class="line">    <span class="attr">"type"</span> : <span class="string">"intl"</span>,</span><br><span class="line">    <span class="attr">"number"</span> : <span class="string">"+1 734 303 4456"</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"email"</span> : &#123;</span><br><span class="line">     <span class="attr">"hide"</span> : <span class="string">"yes"</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>In XML, we can add attributes like “intl” to the “phone” tag.<br>In JSON, we simply have key-value pairs. Also the XML “person” tag is gone, replaced by a set of outer curly braces.</p><p>In general, JSON structures are simpler than XML because JSON has fewer capabilities than XML. But JSON has the advantage that it maps <em>directly</em> to some combination of dictionaries and lists. And since nearly all programming languages have something equivalent to Python’s dictionaries and lists, JSON is a very natural format to have two cooperating programs exchange data.</p><p>JSON is quickly becoming the format of choice for nearly all data exchange between applications because of its relative simplicity compared to XML.</p></blockquote><h2 id="13-5-Parsing-JSON"><a href="#13-5-Parsing-JSON" class="headerlink" title="13.5 Parsing JSON"></a>13.5 Parsing JSON</h2><blockquote><p>We construct our JSON by nesting dictionaries (objects) and lists as needed. In this example, we represent a list of users where each user is a set of key-value pairs (i.e., a dictionary). So we have a list of dictionaries.</p><p>In the following program, we use the built-in <em>json</em> library to parse the JSON and read through the data. Compare this closely to the equivalent XML data and code above. The JSON has less detail, so we must know in advance that we are getting a list and that the list is of users and each user is a set of key-value pairs. The JSON is more succinct (an advantage) but also is less self-describing (a disadvantage).</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Code: http://www.py4e.com/code3/json2.py</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = <span class="string">'''</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">  &#123; "id" : "001",</span></span><br><span class="line"><span class="string">    "x" : "2",</span></span><br><span class="line"><span class="string">    "name" : "Chuck"</span></span><br><span class="line"><span class="string">  &#125; ,</span></span><br><span class="line"><span class="string">  &#123; "id" : "009",</span></span><br><span class="line"><span class="string">    "x" : "7",</span></span><br><span class="line"><span class="string">    "name" : "Chuck"</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">]'''</span></span><br><span class="line"></span><br><span class="line">info = json.loads(data)</span><br><span class="line">print(<span class="string">'User count:'</span>, len(info))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> info:</span><br><span class="line">    print(<span class="string">'Name'</span>, item[<span class="string">'name'</span>])</span><br><span class="line">    print(<span class="string">'Id'</span>, item[<span class="string">'id'</span>])</span><br><span class="line">    print(<span class="string">'Attribute'</span>, item[<span class="string">'x'</span>])</span><br></pre></td></tr></table></figure><p>Output:</p><blockquote><p>User count: 2<br>Name Chuck<br>Id 001<br>Attribute 2<br>Name Chuck<br>Id 009<br>Attribute 7</p></blockquote><ul><li>we get from <em>json.loads()</em> is a Python list which we traverse with a <code>for</code> loop, and each item within that list is a Python dictionary.</li><li>In general, there is an industry trend away from XML and towards JSON for web services. </li><li>But XML is more self-descriptive than JSON and so there are some applications where XML retains an advantage. For example, most word processors store documents internally using XML rather than JSON.</li></ul><h2 id="13-6-Application-Programming-Interfaces-API"><a href="#13-6-Application-Programming-Interfaces-API" class="headerlink" title="13.6 Application Programming Interfaces - API"></a>13.6 Application Programming Interfaces - API</h2><h2 id="13-7-Security-and-API-usage"><a href="#13-7-Security-and-API-usage" class="headerlink" title="13.7 Security and API usage"></a>13.7 Security and API usage</h2><h2 id="13-8-Application"><a href="#13-8-Application" class="headerlink" title="13.8 Application"></a>13.8 Application</h2><h3 id="13-8-1-Google-geocoding-web-service"><a href="#13-8-1-Google-geocoding-web-service" class="headerlink" title="13.8.1 Google geocoding web service"></a>13.8.1 Google geocoding web service</h3><h3 id="13-8-2-Twitter"><a href="#13-8-2-Twitter" class="headerlink" title="13.8.2 Twitter"></a>13.8.2 Twitter</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;First of all, thanks Dr. Charles Russell Severance&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why I write this summary?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gained certificate from last winter vacation(2019)&lt;/li&gt;
&lt;li&gt;need to apply this knowledge for data access&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/assets/image-20200214105208294.png&quot; alt=&quot;image-20200214105208294&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Notes" scheme="http://Yihang-Li.github.io/categories/Notes/"/>
    
    
      <category term="python" scheme="http://Yihang-Li.github.io/tags/python/"/>
    
      <category term="coursera" scheme="http://Yihang-Li.github.io/tags/coursera/"/>
    
      <category term="web" scheme="http://Yihang-Li.github.io/tags/web/"/>
    
      <category term="data access" scheme="http://Yihang-Li.github.io/tags/data-access/"/>
    
  </entry>
  
  <entry>
    <title>Summary for visualization of geospatial data</title>
    <link href="http://yihang-li.github.io/2020/02/10/Summary-for-visualization-of-geospatial-data/"/>
    <id>http://yihang-li.github.io/2020/02/10/Summary-for-visualization-of-geospatial-data/</id>
    <published>2020-02-10T19:04:01.000Z</published>
    <updated>2020-02-14T18:06:40.366Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Here we summarize the geospatial data visualization.</strong></p><p>The <code>Synthetic Power Grid Data Set</code>  will be used as an example. [<a href="https://wimnet.ee.columbia.edu/portfolio/synthetic-power-grids-data-sets/" target="_blank" rel="noopener">Download here</a>]</p><p>Before all the things, let’s import some basic tools:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line">plt.style.use(<span class="string">'ggplot'</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="1-Data-Preparation"><a href="#1-Data-Preparation" class="headerlink" title="1. Data Preparation"></a>1. Data Preparation</h2><h3 id="1-1-Import-Data"><a href="#1-1-Import-Data" class="headerlink" title="1.1 Import Data"></a>1.1 Import Data</h3><blockquote><p>Here, the <code>Location</code>( (Lon, Lat) pairs), <code>Demand</code> and <code>Supply</code> information are loaded by using <code>pandas.read_csv(&quot;path&quot;)</code>. </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Bus_Location = pd.read_csv(<span class="string">"Gen_WI_Bus_Locations.csv"</span>)</span><br><span class="line">Demand_Values = pd.read_csv(<span class="string">"Gen_WI_Demand_Values.csv"</span>)</span><br><span class="line">Supply_Values = pd.read_csv(<span class="string">"Gen_WI_Supply_Values.csv"</span>)</span><br></pre></td></tr></table></figure><h3 id="1-2-Merge-Data"><a href="#1-2-Merge-Data" class="headerlink" title="1.2 Merge Data"></a>1.2 Merge Data</h3><blockquote><p>These 3 tables have the same column named <strong>_Bus Number_</strong> , we can use <code>reduce()</code> to merge them.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># first compile the list of dataframes we want to merge</span></span><br><span class="line">data_frames = [Bus_Location, Demand_Values, Supply_Values]</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">df_merged = reduce(<span class="keyword">lambda</span>  left,right: pd.merge(left,right,on=[<span class="string">'Bus Number'</span>], how=<span class="string">'outer'</span>), data_frames)</span><br><span class="line"><span class="comment">#Then call head() method, we can see the first five rows of our merged data</span></span><br><span class="line">df_merged.head()</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200210151126713.png" alt="head" style="zoom:67%;" /></p><blockquote><p>Moreover, we can call <code>describe()</code> method to summarize our data.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_merged[[<span class="string">'Lon'</span>, <span class="string">'Lat'</span>, <span class="string">'Demand (MW)'</span>, <span class="string">'Supply (MW)'</span>]].describe()</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200210151217027.png" alt="describe" style="zoom:67%;" /></p><hr><h2 id="2-Using-geopandas-to-visualize"><a href="#2-Using-geopandas-to-visualize" class="headerlink" title="2. Using geopandas to visualize"></a>2. Using geopandas to visualize</h2><blockquote><p>We can refer to <code>geopandas</code> docs <a href="https://geopandas.org/" target="_blank" rel="noopener">Click here</a>.</p></blockquote><h3 id="2-1-Data-Structures"><a href="#2-1-Data-Structures" class="headerlink" title="2.1 Data Structures"></a>2.1 Data Structures</h3><blockquote><p>GeoPandas implements two main data structures, a <code>GeoSeries</code> and a <code>GeoDataFrame</code>. These are subclasses of pandas <code>Series</code> and <code>DataFrame</code>, respectively. Before visualization, we should convert our data into proper type.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> geopandas <span class="keyword">as</span> gpd</span><br><span class="line">gdf = gpd.GeoDataFrame(df_merged, geometry = gpd.points_from_xy(df_merged.Lon, df_merged.Lat))</span><br><span class="line">gdf.head()</span><br><span class="line"><span class="comment">#And here call type(gdf):</span></span><br><span class="line"><span class="comment">#geopandas.geodataframe.GeoDataFrame</span></span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200210153603866.png" alt="gdfhead" style="zoom:65%;" /></p><h3 id="2-2-Coordinate-Reference-Systems"><a href="#2-2-Coordinate-Reference-Systems" class="headerlink" title="2.2 Coordinate Reference Systems"></a>2.2 Coordinate Reference Systems</h3><blockquote><p>CRS are important because the geometric shapes in a GeoSeries or GeoDataFrame object are simply a collection of coordinates in an arbitrary space. A CRS tells Python how those coordinates related to places on the Earth.</p><p>CRS are referred to using codes called <a href="https://en.wikipedia.org/wiki/PROJ.4" target="_blank" rel="noopener">proj4 strings</a>. You can find the codes for most commonly used projections from <a href="http://spatialreference.org/" target="_blank" rel="noopener">www.spatialreference.org</a>. Common projections can also be referred to by EPSG codes, so this same projection can also called using the proj4 string <code>&quot;+init=epsg:4326&quot;</code>.</p><p><em>geopandas</em> can accept lots of representations of CRS, including the proj4 string itself (<code>&quot;+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs&quot;</code>) or parameters broken out in a dictionary: <code>{&#39;proj&#39;: &#39;latlong&#39;, &#39;ellps&#39;: &#39;WGS84&#39;, &#39;datum&#39;: &#39;WGS84&#39;, &#39;no_defs&#39;: True}</code>). In addition, some functions will take EPSG codes directly.</p><p>For reference, a few very common projections and their proj4 strings:</p><ul><li>WGS84 Latitude/Longitude: <code>&quot;+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs&quot;</code> or <code>&quot;+init=epsg:4326&quot;</code></li><li>UTM Zones (North): <code>&quot;+proj=utm +zone=33 +ellps=WGS84 +datum=WGS84 +units=m +no_defs&quot;</code></li><li>UTM Zones (South): <code>&quot;+proj=utm +zone=33 +ellps=WGS84 +datum=WGS84 +units=m +no_defs +south&quot;</code></li></ul><p><code>contextily</code>: context geo tiles in Python</p><blockquote><p><code>contextily</code> is a small Python 3 package to retrieve and write to disk tile maps from the internet into geospatial raster files. Bounding boxes can be passed in both WGS84 (<code>EPSG:4326</code>) and Spheric Mercator (<code>EPSG:3857</code>). See <a href="https://github.com/darribas/contextily" target="_blank" rel="noopener">here</a> for usage.</p></blockquote></blockquote><hr><p><strong>Let’s just dive into code</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> contextily <span class="keyword">as</span> ctx</span><br><span class="line">gdf.crs = &#123;<span class="string">'init'</span>: <span class="string">'epsg:4326'</span>, <span class="string">'no_defs'</span>: <span class="literal">True</span>&#125;</span><br><span class="line">gdf = gdf.to_crs(epsg=<span class="number">3857</span>)</span><br><span class="line">ax = gdf.plot(figsize=(<span class="number">10</span>, <span class="number">10</span>), alpha=<span class="number">0.5</span>, edgecolor=<span class="string">'k'</span>)</span><br><span class="line">ctx.add_basemap(ax)</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200210161956076.png" alt="first" style="zoom:67%;" /></p><h3 id="2-3-Mapping-attributes-into-it"><a href="#2-3-Mapping-attributes-into-it" class="headerlink" title="2.3 Mapping attributes into it"></a>2.3 Mapping attributes into it</h3><blockquote><p>Here we map the <code>Demand</code> values into the map, and try to set some parameters</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ax = gdf.plot(figsize=(<span class="number">10</span>, <span class="number">10</span>), alpha=<span class="number">0.5</span>, edgecolor=<span class="string">'w'</span>, column = <span class="string">"Demand (MW)"</span>, legend = <span class="literal">True</span>, </span><br><span class="line">              legend_kwds=&#123;<span class="string">'label'</span>: <span class="string">"Demand (MW)"</span>,<span class="string">'orientation'</span>: <span class="string">"vertical"</span>&#125;) <span class="comment">#horizontal</span></span><br><span class="line">ctx.add_basemap(ax, url=ctx.providers.Stamen.TonerLite)</span><br><span class="line">ax.set_axis_off()</span><br><span class="line">plt.savefig(<span class="string">'Demand(MW)'</span>)</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200210162505599.png" alt="Second" style="zoom:67%;" /></p><h3 id="2-4-Summary"><a href="#2-4-Summary" class="headerlink" title="2.4 Summary"></a>2.4 Summary</h3><blockquote><p>Here we summarize 2.3 as follows:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Attribute_mapping</span><span class="params">(gdf, column, legend_kwds)</span>:</span></span><br><span class="line">    ax = gdf.plot(figsize = (<span class="number">10</span>, <span class="number">10</span>), alpha = <span class="number">0.5</span>, edgecolor = <span class="string">'w'</span>, column = column, legend = <span class="literal">True</span>, legend_kwds = legend_kwds)</span><br><span class="line">    ctx.add_basemap(ax, url=ctx.providers.Stamen.TonerLite)</span><br><span class="line">    ax.set_axis_off()</span><br></pre></td></tr></table></figure><blockquote><p>Our input is:</p><ul><li><code>gdf</code> : Corresponding geopandas dataframe after processing in 2.2</li><li><code>column</code>: Corresponding Attribute column that we want to map</li><li><code>legend_kwds</code>: Corresponding legend parameters</li></ul></blockquote><p><strong>Let’s see an example below:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#First get our gdf</span></span><br><span class="line"><span class="keyword">import</span> geopandas <span class="keyword">as</span> gpd</span><br><span class="line">gdf = gpd.GeoDataFrame(df_merged, geometry = gpd.points_from_xy(df_merged.Lon, df_merged.Lat)) <span class="comment">#Note: df_merged is a pandas dataframe!</span></span><br><span class="line"><span class="comment">#process as in 2.2</span></span><br><span class="line"><span class="keyword">import</span> contextily <span class="keyword">as</span> ctx</span><br><span class="line">gdf.crs = &#123;<span class="string">'init'</span>: <span class="string">'epsg:4326'</span>, <span class="string">'no_defs'</span>: <span class="literal">True</span>&#125;</span><br><span class="line">gdf = gdf.to_crs(epsg=<span class="number">3857</span>)</span><br><span class="line"><span class="comment">#set our column and legend_kwds</span></span><br><span class="line">column = <span class="string">"Supply (MW)"</span></span><br><span class="line">legend_kwds=&#123;<span class="string">'label'</span>: <span class="string">"Supply (MW)"</span>,<span class="string">'orientation'</span>: <span class="string">"vertical"</span>&#125;</span><br><span class="line"><span class="comment">#call the function above</span></span><br><span class="line">Attribute_mapping(gdf, column, legend_kwds)</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200210164126937.png" alt="Third" style="zoom:67%;" /></p><hr><h2 id="3-Try-Something-More"><a href="#3-Try-Something-More" class="headerlink" title="3. Try Something More"></a>3. Try Something More</h2><h3 id="3-1-Remove-Zero"><a href="#3-1-Remove-Zero" class="headerlink" title="3.1 Remove Zero"></a>3.1 Remove Zero</h3><p>As we see the describe results in 1.2, more than 75% of Demand and Supply are all zero. So, in this part, we try to deal with them.</p><p>Just see the code</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">None_Zero_Demand = gdf[gdf[<span class="string">'Demand (MW)'</span>] != <span class="number">0.0</span>]</span><br><span class="line">None_Zero_Demand.head()</span><br><span class="line">None_Zero_Demand.describe()</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200210165814250.png" alt="None0Demand" style="zoom:50%;" /><img src="/assets/image-20200210165930907.png" alt="Describe" style="zoom:50%;" /></p><p>Here we see:</p><ol><li>there are only 3095 none zero Demand compare to 14430 in total.</li><li>All the Supply  are zero while Demand are none zero</li></ol><h3 id="3-2-Visualize-the-None-Zero-Part"><a href="#3-2-Visualize-the-None-Zero-Part" class="headerlink" title="3.2 Visualize the None Zero Part"></a>3.2 Visualize the None Zero Part</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">column = <span class="string">"Demand (MW)"</span></span><br><span class="line">legend_kwds=&#123;<span class="string">'label'</span>: <span class="string">"None Zero Demand"</span>,<span class="string">'orientation'</span>: <span class="string">"vertical"</span>&#125;</span><br><span class="line">Attribute_mapping(None_Zero_Demand, column, legend_kwds)</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200210170733776.png" alt="nonezerodemand" style="zoom:67%;" /></p><p>Though the points become less, most of them are near zero (purple color). So, we can try to limit the value to visualize more clear.</p><h3 id="3-3-Separate-into-Three-Parts-by-ordered-values"><a href="#3-3-Separate-into-Three-Parts-by-ordered-values" class="headerlink" title="3.3 Separate into Three Parts by ordered values"></a>3.3 Separate into Three Parts by ordered values</h3><p>Let’s first order the DataFrame by <code>Demand</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">None_Zero_Demand = None_Zero_Demand.sort_values(by = <span class="string">'Demand (MW)'</span>)</span><br><span class="line">None_Zero_Demand.head()</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200210171813748.png" alt="order" style="zoom:67%;" /></p><p>Then split it into 3 parts</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Split3 = np.array_split(None_Zero_Demand, <span class="number">3</span>)</span><br><span class="line">Part1, Part2, Part3 = Split3[<span class="number">0</span>], Split3[<span class="number">1</span>], Split3[<span class="number">2</span>]</span><br><span class="line">Part1.head()</span><br><span class="line">Part2.head()</span><br><span class="line">Part3.head()</span><br><span class="line"><span class="comment">#Note: here the other two columns not presented in the figures</span></span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200210172559313.png" alt="P1head" style="zoom:30%;" /><img src="/assets/image-20200210172638632.png" alt="P2head" style="zoom:30%;" /><img src="/assets/image-20200210172724404.png" alt="P3head" style="zoom:30%;" /></p><p>Finally, visualize each part</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">column = <span class="string">"Demand (MW)"</span></span><br><span class="line"><span class="comment">#Part1</span></span><br><span class="line">legend_kwds=&#123;<span class="string">'label'</span>: <span class="string">"None Zero Demand"</span>,<span class="string">'orientation'</span>: <span class="string">"vertical"</span>&#125;</span><br><span class="line">Attribute_mapping(Part1, column, legend_kwds)</span><br><span class="line"><span class="comment">#Part2</span></span><br><span class="line">legend_kwds=&#123;<span class="string">'label'</span>: <span class="string">"None Zero Demand"</span>,<span class="string">'orientation'</span>: <span class="string">"vertical"</span>&#125;</span><br><span class="line">Attribute_mapping(Part2, column, legend_kwds)</span><br><span class="line"><span class="comment">#Part3</span></span><br><span class="line">legend_kwds=&#123;<span class="string">'label'</span>: <span class="string">"None Zero Demand"</span>,<span class="string">'orientation'</span>: <span class="string">"vertical"</span>&#125;</span><br><span class="line">Attribute_mapping(Part3, column, legend_kwds)</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200210173434367.png" alt="P1V" style="zoom:30%;" /><img src="/assets/image-20200210173507904.png" alt="P2v" style="zoom:30%;" /><img src="/assets/image-20200210173536841.png" alt="P3v" style="zoom:30%;" /></p><p>Here we:</p><ul><li><p>[x] ​    Visualize three parts separately</p></li><li><p>[ ] ​    Unify the color bars in above three figures.</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Here we summarize the geospatial data visualization.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Synthetic Power Grid Data Set&lt;/code&gt;  will be used as an example. [&lt;a href=&quot;https://wimnet.ee.columbia.edu/portfolio/synthetic-power-grids-data-sets/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Download here&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;Before all the things, let’s import some basic tools:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%matplotlib inline&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.style.use(&lt;span class=&quot;string&quot;&gt;&#39;ggplot&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Notes" scheme="http://Yihang-Li.github.io/categories/Notes/"/>
    
    
      <category term="python" scheme="http://Yihang-Li.github.io/tags/python/"/>
    
      <category term="geospatial" scheme="http://Yihang-Li.github.io/tags/geospatial/"/>
    
      <category term="visualization" scheme="http://Yihang-Li.github.io/tags/visualization/"/>
    
  </entry>
  
  <entry>
    <title>Notes of Gaussian Processes for Machine Learning</title>
    <link href="http://yihang-li.github.io/2020/02/08/Notes-of-Gaussian-Processes-for-Machine-Learning/"/>
    <id>http://yihang-li.github.io/2020/02/08/Notes-of-Gaussian-Processes-for-Machine-Learning/</id>
    <published>2020-02-08T22:13:14.000Z</published>
    <updated>2020-02-14T15:32:54.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ch6-Relationships-between-GPs-and-Other-Models"><a href="#Ch6-Relationships-between-GPs-and-Other-Models" class="headerlink" title="Ch6 Relationships between GPs and Other Models"></a>Ch6 Relationships between GPs and Other Models</h1><h2 id="6-1-Reproducing-Kernel-Hilbert-Spaces"><a href="#6-1-Reproducing-Kernel-Hilbert-Spaces" class="headerlink" title="6.1 Reproducing Kernel Hilbert Spaces"></a>6.1 Reproducing Kernel Hilbert Spaces</h2><h5 id="Preliminary"><a href="#Preliminary" class="headerlink" title="Preliminary"></a>Preliminary</h5><p>This part covers reproducing kernel Hilbert spaces(RKHSs), which define a Hilbert space of sufficiently-smooth functions corresponding to a given positive semidefinite kernel $k$.</p><blockquote><p> <strong>Kernel</strong>: A general name for a function $k$ of two arguments mapping a pair of inputs $\mathbf{x} \in \mathcal{X}, \mathbf{x}^{\prime} \in \mathcal{X}$ into $\mathbb{R}$ is a kernel.<br> (This term arises in the theory of integral operators, where the operator $T_{k}$ is defined as $\left(T_{k} f\right)(\mathbf{x})=\int_{\mathcal{X}} k\left(\mathbf{x}, \mathbf{x}^{\prime}\right) f\left(\mathbf{x}^{\prime}\right) d \mu\left(\mathbf{x}^{\prime}\right)$, where $\mu$ denotes a measure.)</p><p> <strong>Positive semidefinite</strong>: A kernel is said to be positive semidefinite if </p><script type="math/tex; mode=display"> \int k\left(\mathbf{x}, \mathbf{x}^{\prime}\right) f(\mathbf{x}) f\left(\mathbf{x}^{\prime}\right) d \mu(\mathbf{x}) d \mu\left(\mathbf{x}^{\prime}\right) \geq 0</script><p>  for all $f \in L_{2}(\mathcal{X}, \mu)$</p></blockquote><a id="more"></a><h5 id="Formal-definition-of-RKHS"><a href="#Formal-definition-of-RKHS" class="headerlink" title="Formal definition of RKHS."></a>Formal definition of RKHS.</h5><blockquote><p><strong><em>Def 6.1</em></strong> (Reproducing kernel Hilbert space). Let $\mathcal{H}$ be a Hilbert space of real functions $f$ defined on an index set $\mathcal{X}$. Then $\mathcal{H}$ is called a reproducing kernel Hilbert space endowed with an inner product $\langle\cdot, \cdot\rangle_{\mathcal{H}}$ (and norm $|f|_{\mathcal{H}} = \sqrt{\langle f, f\rangle_{\mathcal{H}}})$) if there exists a function $k: \mathcal{X} \times \mathcal{X} \rightarrow \mathbb{R}$ with the following properties:</p><ol><li><p>for every $\mathbf{x}, k\left(\mathbf{x}, \mathbf{x}^{\prime}\right)$ as a function of $\mathbf{x^{\prime}}$ belongs to $\mathcal{H},$ and</p></li><li><p>$k$ has the reproducing property $\langle f(\cdot), k(\cdot, \mathbf{x})\rangle_{\mathcal{H}}=f(\mathbf{x})$.</p></li></ol><blockquote><p>Note: As $k(\mathbf{x}, \cdot)$ and $k\left(\mathbf{x}^{\prime}, \cdot\right)$ are in $\mathcal{H}$, we have that $\left\langle k(\mathbf{x}, \cdot), k\left(\mathbf{x}^{\prime}, \cdot\right)\right\rangle_{\mathcal{H}}=k\left(\mathbf{x}, \mathbf{x}^{\prime}\right)$.</p></blockquote></blockquote><hr><p>The RKHS uniquely determines $k$, and vice versa, as stated in the following theorem:</p><blockquote><p><strong>Theorem 6.1</strong> (Moore-Aronszajn theorem). Let $\mathcal{X}$ be an index set. Then for every positive definite function $k(\cdot,\cdot)$ on $\mathcal{X} \times \mathcal{X}$ there exists a unique RKHS, and vice versa.</p></blockquote><hr><h5 id="From-Mercer’s-theorem-point-of-view"><a href="#From-Mercer’s-theorem-point-of-view" class="headerlink" title="From Mercer’s theorem point of view"></a>From Mercer’s theorem point of view</h5><h6 id="Recall-some-basic-things-here"><a href="#Recall-some-basic-things-here" class="headerlink" title="Recall some basic things here"></a>Recall some basic things here</h6><blockquote><p><strong>Eigenvalue&amp;Eigenfunction</strong>: A function $\phi(\cdot)$ that obeys the integral equation </p><script type="math/tex; mode=display">\int k\left(\mathbf{x}, \mathbf{x}^{\prime}\right) \phi(\mathbf{x}) d \mu(\mathbf{x})=\lambda \phi\left(\mathbf{x}^{\prime}\right)</script><p>is called an eigenfunction of kernel $k$ with eigenvalue $\lambda$ with respect to measure $\mu$.</p><p><strong>Theorem 4.2</strong> (<strong>Mercer’s theorem</strong>). Let $(\mathcal{X}, \mu)$ be a finite measure space and $k \in L_{\infty}\left(\mathcal{X}^{2}, \mu^{2}\right)$ be a kernel such that $T_{k}: L_{2}(\mathcal{X}, \mu) \rightarrow L_{2}(\mathcal{X}, \mu)$ is positive definite. Let$\phi_{i} \in L_{2}(\mathcal{X}, \mu)$ be the normalized eigenfunctions of $T_{k}$ associated with the eigenvalues $\lambda_{i}&gt;0$. Then:</p><ol><li><p>the eigenvalues $\left\{\lambda_{i}\right\}_{i=1}^{\infty}$ are absolutely summable</p></li><li><script type="math/tex; mode=display">k\left(\mathbf{x}, \mathbf{x}^{\prime}\right)=\sum_{i=1}^{\infty} \lambda_{i} \phi_{i}(\mathbf{x}) \phi_{i}^{*}\left(\mathbf{x}^{\prime}\right)​</script><p> holds $\mu^2$ almost everywhere, where the series converges absolutely and uniformly $\mu^2$ almost everywhere.</p></li></ol><p>Note: the sum may terminate at some value $N \in \mathbb{N}$ (degenerate kernel case), or the sum may be infinite(nondegenerate kernel case). </p><p>Q: The eigenfunctions are orthonormal $w.r.t.$ $\mu$, i.e. we have $\int \phi_{i}(\mathbf{x}) \phi_{j}(\mathbf{x}) d \mu(\mathbf{x})=\delta_{i j}$.  </p></blockquote><h6 id="An-example-of-RKHS"><a href="#An-example-of-RKHS" class="headerlink" title="An example of RKHS"></a>An example of RKHS</h6><blockquote><p>a real positive semidefinite kernel $k\left(\mathbf{x}, \mathbf{x}^{\prime}\right)$ with an eigenfunction expansion $k\left(\mathbf{x}, \mathbf{x}^{\prime}\right)=\sum_{i=1}^{N} \lambda_{i} \phi_{i}(\mathbf{x}) \phi_{i}\left(\mathbf{x}^{\prime}\right)$ relative to measure $\mu$, and<br>a Hilbert space comprised of linear combinations of the the eigenfunctions, i.e. $f(\mathbf{x})=\sum_{i=1}^{N} f_{i} \phi_{i}(\mathbf{x})$ with $\sum_{i=1}^{N} f_{i}^{2} / \lambda_{i}&lt;\infty$.<br>Then the inner product $\langle f, g\rangle_{\mathcal{H}}$ in this Hilbert space between $f(\mathbf{x})$ and $g(\mathbf{x})=\sum_{i=1}^{N} g_{i} \phi_{i}(\mathbf{x})$ is defined as </p><script type="math/tex; mode=display">\langle f, g\rangle_{\mathcal{H}}=\sum_{i=1}^{N} \frac{f_{i} g_{i}}{\lambda_{i}}</script><p>Thus this Hilbert is equipped with a norm $|f|_{\mathcal{H}}$ where $|f|_{\mathcal{H}}^{2}=\langle f, f\rangle_{\mathcal{H}}=\sum_{i=1}^{N} f_{i}^{2} / \lambda_{i}$.<br>Note that for $|f|_{\mathcal{H}}$ to be finite the sequence of coefficients $\{f_i\}$ must decay quickly;<br>effectively this imposes a smoothness condition on the space.</p></blockquote><p>Next to show that this Hilbert space is the RKHS corresponding to the kernel $k$, i.e. that it has the reproducing property.<br>This is achieved as </p><script type="math/tex; mode=display">\langle f(\cdot), k(\cdot, \mathbf{x})\rangle_{\mathcal{H}}=\sum_{i=1}^{N} \frac{f_{i} \lambda_{i} \phi_{i}(\mathbf{x})}{\lambda_{i}}=f(\mathbf{x})</script><p>Similarly</p><script type="math/tex; mode=display">\left\langle k(\mathbf{x}, \cdot), k\left(\mathbf{x}^{\prime}, \cdot\right)\right\rangle_{\mathcal{H}}=\sum_{i=1}^{N} \frac{\lambda_{i} \phi_{i}(\mathbf{x}) \lambda_{i} \phi_{i}\left(\mathbf{x}^{\prime}\right)}{\lambda_{i}}=k\left(\mathbf{x}, \mathbf{x}^{\prime}\right)</script><p>Notice also that $k(\mathbf{x}, \cdot)$ is in the RKHS as it has norm $\sum_{i=1}^{N}\left(\lambda_{i} \phi_{i}(\mathbf{x})\right)^{2} / \lambda_{i}=k(\mathbf{x}, \mathbf{x})&lt;\infty$.<br>We have now demonstrated that this Hilbert space fulfils the two conditions given in <strong>Def 6.1</strong>.<br>As there is a unique RKHS associated with $k(\cdot,\cdot)$, this Hilbert space must be that RKHS.</p><h6 id="Advantage-of-the-abstract-formulation-of-the-RKHS"><a href="#Advantage-of-the-abstract-formulation-of-the-RKHS" class="headerlink" title="Advantage of  the abstract formulation of the RKHS"></a>Advantage of  the abstract formulation of the RKHS</h6><p>The eigenbasis will change as we use different measures $\mu$ in Mercer’s theorem.<br>However, the RKHS norm is in fact solely a property of the kernel and is invariant under this change of measure. </p><h6 id="Sample-function"><a href="#Sample-function" class="headerlink" title="Sample function"></a>Sample function</h6><p>If we sample the coefficients $f_i$ in the eigenexpansion $f(\mathbf{x})=\sum_{i=1}^{N} f_{i} \phi_{i}(\mathbf{x})$ from $\mathcal{N}\left(0, \lambda_{i}\right)$ then </p><script type="math/tex; mode=display">\mathbb{E}\left[\|f\|_{\mathcal{H}}^{2}\right]=\sum_{i=1}^{N} \frac{\mathbb{E}\left[f_{i}^{2}\right]}{\lambda_{i}}=\sum_{i=1}^{N} 1</script><p>Thus if N is infinite, the sample functions are not in $\mathcal{H}$, as the expected value of the RKHS norm is infinite.<br>However, the posterior mean after observing some data will lie in the RKHS, due to the smoothing properties of averaging.</p><h5 id="From-reproducing-kernel-map-point-of-view"><a href="#From-reproducing-kernel-map-point-of-view" class="headerlink" title="From reproducing kernel map point of view"></a>From reproducing kernel map point of view</h5><p>Consider the space of functions $f$ defined as </p><script type="math/tex; mode=display">\left\{f(\mathbf{x})=\sum_{i=1}^{n} \alpha_{i} k\left(\mathbf{x}, \mathbf{x}_{i}\right): n \in \mathbb{N}, \mathbf{x}_{i} \in \mathcal{X}, \alpha_{i} \in \mathbb{R}\right\}</script><p>Let $g(\mathbf{x})=\sum_{j=1}^{n^{\prime}}\alpha_j^{\prime}k(\mathbf{x},\mathbf{x}_j^{\prime})$. Then we define the inner product</p><script type="math/tex; mode=display">\langle f, g\rangle_{\mathcal{H}}=\sum_{i=1}^{n} \sum_{j=1}^{n^{\prime}} \alpha_{i} \alpha_{j}^{\prime} k\left(\mathbf{x}_{i}, \mathbf{x}_{j}^{\prime}\right)</script><p>Q: condition 1 of <strong>Def 6.1</strong> is fulfilled under the reproducing kernel map construction.</p><p>Next show the reproducing property as :</p><script type="math/tex; mode=display">\langle k(\cdot, \mathbf{x}), f(\cdot)\rangle_{\mathcal{H}}=\sum_{i=1}^{n} \alpha_{i} k\left(\mathbf{x}, \mathbf{x}_{i}\right)=f(\mathbf{x}).</script><h2 id="6-2-Regularization"><a href="#6-2-Regularization" class="headerlink" title="6.2 Regularization"></a>6.2 Regularization</h2><h5 id="Preliminary-1"><a href="#Preliminary-1" class="headerlink" title="Preliminary"></a>Preliminary</h5><h6 id="regularizer"><a href="#regularizer" class="headerlink" title="regularizer"></a>regularizer</h6><h6 id="kernel-ridge-regression"><a href="#kernel-ridge-regression" class="headerlink" title="kernel ridge regression"></a>kernel ridge regression</h6><h6 id="representer-theorem"><a href="#representer-theorem" class="headerlink" title="representer theorem"></a>representer theorem</h6><h5 id="RKHSs-defined-in-terms-of-differential-operators"><a href="#RKHSs-defined-in-terms-of-differential-operators" class="headerlink" title="RKHSs defined in terms of differential operators"></a>RKHSs defined in terms of differential operators</h5><h6 id="null-space"><a href="#null-space" class="headerlink" title="null space"></a>null space</h6><h6 id="Green’s-function"><a href="#Green’s-function" class="headerlink" title="Green’s function"></a>Green’s function</h6><h6 id="Two-examples"><a href="#Two-examples" class="headerlink" title="Two examples"></a>Two examples</h6><h5 id="Obtaining-the-Regularized-Solution"><a href="#Obtaining-the-Regularized-Solution" class="headerlink" title="Obtaining the Regularized Solution"></a>Obtaining the Regularized Solution</h5><h6 id="regularization-network"><a href="#regularization-network" class="headerlink" title="regularization network"></a>regularization network</h6><h5 id="The-Relationship-of-the-Regularization-View-to-Gaussian-Process-Prediction"><a href="#The-Relationship-of-the-Regularization-View-to-Gaussian-Process-Prediction" class="headerlink" title="The Relationship of the Regularization View to Gaussian Process Prediction"></a>The Relationship of the Regularization View to Gaussian Process Prediction</h5><h2 id="6-3-Spline-Models"><a href="#6-3-Spline-Models" class="headerlink" title="6.3 Spline Models"></a>6.3 Spline Models</h2><h2 id="6-4-Support-Vector-Machines"><a href="#6-4-Support-Vector-Machines" class="headerlink" title="6.4 Support Vector Machines"></a>6.4 Support Vector Machines</h2><h2 id="6-5-Least-squares-Classification"><a href="#6-5-Least-squares-Classification" class="headerlink" title="6.5 Least-squares Classification"></a>6.5 Least-squares Classification</h2><h2 id="6-6-Relevance-Vector-Machines"><a href="#6-6-Relevance-Vector-Machines" class="headerlink" title="6.6 Relevance Vector Machines"></a>6.6 Relevance Vector Machines</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Ch6-Relationships-between-GPs-and-Other-Models&quot;&gt;&lt;a href=&quot;#Ch6-Relationships-between-GPs-and-Other-Models&quot; class=&quot;headerlink&quot; title=&quot;Ch6 Relationships between GPs and Other Models&quot;&gt;&lt;/a&gt;Ch6 Relationships between GPs and Other Models&lt;/h1&gt;&lt;h2 id=&quot;6-1-Reproducing-Kernel-Hilbert-Spaces&quot;&gt;&lt;a href=&quot;#6-1-Reproducing-Kernel-Hilbert-Spaces&quot; class=&quot;headerlink&quot; title=&quot;6.1 Reproducing Kernel Hilbert Spaces&quot;&gt;&lt;/a&gt;6.1 Reproducing Kernel Hilbert Spaces&lt;/h2&gt;&lt;h5 id=&quot;Preliminary&quot;&gt;&lt;a href=&quot;#Preliminary&quot; class=&quot;headerlink&quot; title=&quot;Preliminary&quot;&gt;&lt;/a&gt;Preliminary&lt;/h5&gt;&lt;p&gt;This part covers reproducing kernel Hilbert spaces(RKHSs), which define a Hilbert space of sufficiently-smooth functions corresponding to a given positive semidefinite kernel $k$.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; &lt;strong&gt;Kernel&lt;/strong&gt;: A general name for a function $k$ of two arguments mapping a pair of inputs $\mathbf{x} \in \mathcal{X}, \mathbf{x}^{\prime} \in \mathcal{X}$ into $\mathbb{R}$ is a kernel.&lt;br&gt; (This term arises in the theory of integral operators, where the operator $T_{k}$ is defined as $\left(T_{k} f\right)(\mathbf{x})=\int_{\mathcal{X}} k\left(\mathbf{x}, \mathbf{x}^{\prime}\right) f\left(\mathbf{x}^{\prime}\right) d \mu\left(\mathbf{x}^{\prime}\right)$, where $\mu$ denotes a measure.)&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;Positive semidefinite&lt;/strong&gt;: A kernel is said to be positive semidefinite if &lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
 \int k\left(\mathbf{x}, \mathbf{x}^{\prime}\right) f(\mathbf{x}) f\left(\mathbf{x}^{\prime}\right) d \mu(\mathbf{x}) d \mu\left(\mathbf{x}^{\prime}\right) \geq 0&lt;/script&gt;&lt;p&gt;  for all $f \in L_{2}(\mathcal{X}, \mu)$&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Notes" scheme="http://Yihang-Li.github.io/categories/Notes/"/>
    
    
      <category term="GP" scheme="http://Yihang-Li.github.io/tags/GP/"/>
    
      <category term="ML" scheme="http://Yihang-Li.github.io/tags/ML/"/>
    
  </entry>
  
  <entry>
    <title>Hello Echo~</title>
    <link href="http://yihang-li.github.io/2020/02/05/Hello-Echo/"/>
    <id>http://yihang-li.github.io/2020/02/05/Hello-Echo/</id>
    <published>2020-02-06T04:11:04.000Z</published>
    <updated>2020-02-08T22:43:12.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="This-is-my-blog"><a href="#This-is-my-blog" class="headerlink" title="This is my blog"></a>This is my blog</h1><h2 id="Hellow"><a href="#Hellow" class="headerlink" title="Hellow"></a>Hellow</h2><p><img src="https://s2.ax1x.com/2020/02/06/1yubPU.jpg" alt="avatar"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><p>$\mathcal{H}$ is a Hilbert Space</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;This-is-my-blog&quot;&gt;&lt;a href=&quot;#This-is-my-blog&quot; class=&quot;headerlink&quot; title=&quot;This is my blog&quot;&gt;&lt;/a&gt;This is my blog&lt;/h1&gt;&lt;h2 id=&quot;Hellow&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="personal" scheme="http://Yihang-Li.github.io/categories/personal/"/>
    
    
      <category term="attempts" scheme="http://Yihang-Li.github.io/tags/attempts/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yihang-li.github.io/2020/02/05/hello-world/"/>
    <id>http://yihang-li.github.io/2020/02/05/hello-world/</id>
    <published>2020-02-06T02:26:11.292Z</published>
    <updated>2020-02-06T02:26:11.292Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
